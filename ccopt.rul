# ---------------------------------------
# RULES for MESCC source code optimizator
# ---------------------------------------
#
# The order is important.
#
# See CAUTION notes.
#
# See FIXME notes.
#
# ------------------------------
# CONSTANT ARITHMETIC OPERATIONS
# ------------------------------
#
# In MESCC, all constant arithmetic operations are signed (int).
#
# (int) const + const
#
 LD HL,@1
 PUSH HL
 LD HL,@2
 POP DE
 ADD HL,DE

 LD HL,@=1+2

6
#
# (int) const - const
#
 LD HL,@1
 PUSH HL
 LD HL,@2
 POP DE
 CALL ccsub

 LD HL,@=1-2

8
#
# (int) const * const
#
 LD HL,@1
 PUSH HL
 LD HL,@2
 POP DE
 CALL ccmul

 LD HL,@=1*2

8
#
# (int) const / const
#
 LD HL,@1
 PUSH HL
 LD HL,@2
 POP DE
 CALL ccdiv

 LD HL,@=1/2

8
#
# (int) const % const
#
 LD HL,@1
 PUSH HL
 LD HL,@2
 POP DE
 CALL ccmod

 LD HL,@=1%2

8
#
# (int) const | const
#
 LD HL,@1
 PUSH HL
 LD HL,@2
 POP DE
 CALL ccor

 LD HL,@=1|2

8
#
# (int) const & const
#
 LD HL,@1
 PUSH HL
 LD HL,@2
 POP DE
 CALL ccand

 LD HL,@=1&2

8
#
# (int) const ^ const
#
 LD HL,@1
 PUSH HL
 LD HL,@2
 POP DE
 CALL ccxor

 LD HL,@=1^2

8
#
# (int) const >> const
#
 LD HL,@1
 PUSH HL
 LD HL,@2
 POP DE
 CALL ccasr

 LD HL,@=1>>2

8
#
# (int) const << const
#
 LD HL,@1
 PUSH HL
 LD HL,@2
 POP DE
 CALL ccasl

 LD HL,@=1<<2

8
#
# (int) const || const
#
 LD HL,@1
 PUSH HL
 LD HL,@2
 POP DE
 CALL cclgor

 LD HL,@=1||2

8
#
# (int) const && const
#
 LD HL,@1
 PUSH HL
 LD HL,@2
 POP DE
 CALL ccland

 LD HL,@=1&&2

8
#
# (int) const == const
#
 LD HL,@1
 PUSH HL
 LD HL,@2
 POP DE
 CALL cceq

 LD HL,@=1==2

8
#
# (int) const != const
#
 LD HL,@1
 PUSH HL
 LD HL,@2
 POP DE
 CALL ccne

 LD HL,@=1!=2

8
#
# (int) const > const
#
 LD HL,@1
 PUSH HL
 LD HL,@2
 POP DE
 CALL ccgt

 LD HL,@=1>2

8
#
# (int) const < const
#
 LD HL,@1
 PUSH HL
 LD HL,@2
 POP DE
 CALL cclt

 LD HL,@=1<2

8
#
# (int) const >= const
#
 LD HL,@1
 PUSH HL
 LD HL,@2
 POP DE
 CALL ccge

 LD HL,@=1>=2

8
#
# (int) const <= const
#
 LD HL,@1
 PUSH HL
 LD HL,@2
 POP DE
 CALL ccle

 LD HL,@=1<=2

8
#
# (int) double a const
#
 LD HL,@1
 ADD HL,HL

 LD HL,@=1+1

1
#
# (int) !const (logical not)
#
 LD HL,@1
 CALL cclgnot

 LD HL,@=!1

3
#
# (int) -const (2 complement or negate)
#
 LD HL,@1
 CALL ccneg

 LD HL,@=-1

3
#
# (int) ~const (1 complement)
#
 LD HL,@1
 CALL cccom

 LD HL,@=~1

3
# -----------------
# SOMETHING + CONST
# -----------------
#
# HL + 0
#
 PUSH HL
 LD HL,0
 POP DE
 ADD HL,DE


6
#
# HL + 1
#
 PUSH HL
 LD HL,1
 POP DE
 ADD HL,DE

 INC HL

5
#
# HL + 2
#
 PUSH HL
 LD HL,2
 POP DE
 ADD HL,DE

 INC HL
 INC HL

4
#
# HL + 3
#
 PUSH HL
 LD HL,3
 POP DE
 ADD HL,DE

 INC HL
 INC HL
 INC HL

3
#
# HL + 4
#
 PUSH HL
 LD HL,4
 POP DE
 ADD HL,DE

 INC HL
 INC HL
 INC HL
 INC HL

2
#
# HL + 5
#
 PUSH HL
 LD HL,5
 POP DE
 ADD HL,DE

 INC HL
 INC HL
 INC HL
 INC HL
 INC HL

1
# ----------------------
# SYMBOL ADDRESS + CONST
# ----------------------
#
 LD HL,@a
 PUSH HL
 LD HL,@1
 POP DE
 ADD HL,DE

 LD HL,@a+@1

6
# ----------------------
# SYMBOL ADDRESS - CONST
# ----------------------
#
 LD HL,@a
 PUSH HL
 LD HL,@1
 POP DE
 CALL ccsub

 LD HL,@a-@1

8
# -----------------
# SOMETHING - CONST
# -----------------
#
# HL - 0
#
 PUSH HL
 LD HL,0
 POP DE
 CALL ccsub


8
#
# HL - 1
#
 PUSH HL
 LD HL,1
 POP DE
 CALL ccsub

 DEC HL

7
#
# HL - 2
#
 PUSH HL
 LD HL,2
 POP DE
 CALL ccsub

 DEC HL
 DEC HL

6
#
# HL - 3
#
 PUSH HL
 LD HL,3
 POP DE
 CALL ccsub

 DEC HL
 DEC HL
 DEC HL

5
#
# HL - 4
#
 PUSH HL
 LD HL,4
 POP DE
 CALL ccsub

 DEC HL
 DEC HL
 DEC HL
 DEC HL

4
#
# HL - 5
#
 PUSH HL
 LD HL,5
 POP DE
 CALL ccsub

 DEC HL
 DEC HL
 DEC HL
 DEC HL
 DEC HL

3
#
# HL - 6
#
 PUSH HL
 LD HL,6
 POP DE
 CALL ccsub

 DEC HL
 DEC HL
 DEC HL
 DEC HL
 DEC HL
 DEC HL

2
#
# HL - 7
#
 PUSH HL
 LD HL,7
 POP DE
 CALL ccsub

 DEC HL
 DEC HL
 DEC HL
 DEC HL
 DEC HL
 DEC HL
 DEC HL

1
#
# -------------------------------
# SYMBOL ADDRESS + SYMBOL ADDRESS
# -------------------------------
#
 LD HL,@a
 PUSH HL
 LD HL,@b
 POP DE
 ADD HL,DE

 LD HL,@a+@b

6
# -------------------------------
# SYMBOL ADDRESS - SYMBOL ADDRESS
# -------------------------------
#
 LD HL,@a
 PUSH HL
 LD HL,@b
 POP DE
 CALL ccsub

 LD HL,@a-@b

8
# ------------------
# SOMETHING OP CONST
# ------------------
#
# (int, uint) something + const
#
 PUSH HL
 LD HL,@1
 POP DE
 ADD HL,DE

 LD DE,@1
 ADD HL,DE

2
#
# (int) something * const
#
 PUSH HL
 LD HL,@1
 POP DE
 CALL ccmul

 LD DE,@1
 CALL ccmul

2
#
# (uint) something * const
#
 PUSH HL
 LD HL,@1
 POP DE
 CALL ccumul

 LD DE,@1
 CALL ccumul

2
#
# (int, uint) something | const
#
 PUSH HL
 LD HL,@1
 POP DE
 CALL ccor

 LD DE,@1
 CALL ccor

2
#
# (int, uint) something & const
#
 PUSH HL
 LD HL,@1
 POP DE
 CALL ccand

 LD DE,@1
 CALL ccand

2
#
# (int, uint) something ^ const
#
 PUSH HL
 LD HL,@1
 POP DE
 CALL ccxor

 LD DE,@1
 CALL ccxor

2
#
# (int, uint) something == const
#
 PUSH HL
 LD HL,@1
 POP DE
 CALL cceq

 LD DE,@1
 CALL cceq

2
#
# (int, uint) something != const
#
 PUSH HL
 LD HL,@1
 POP DE
 CALL ccneq

 LD DE,@1
 CALL ccneq

2
#
# (int, uint) something || const
#
 PUSH HL
 LD HL,@1
 POP DE
 CALL cclgor

 LD DE,@1
 CALL cclgor

2
#
# (int, uint) something && const
#
 PUSH HL
 LD HL,@1
 POP DE
 CALL cclgand

 LD DE,@1
 CALL cclgand

2
# -------------------
# SOMETHING OP SYMBOL
# -------------------
#
# (int, uint) something + symbol
#
 PUSH HL
 LD HL,@a
 POP DE
 ADD HL,DE

 LD DE,@a
 ADD HL,DE

2
#
# (int) something * symbol
#
 PUSH HL
 LD HL,@a
 POP DE
 CALL ccmul

 LD DE,@a
 CALL ccmul

2
#
# (uint) something * symbol
#
 PUSH HL
 LD HL,@a
 POP DE
 CALL ccumul

 LD DE,@a
 CALL ccumul

2
#
# (int, uint) something | symbol
#
 PUSH HL
 LD HL,@a
 POP DE
 CALL ccor

 LD DE,@a
 CALL ccor

2
#
# (int, uint) something & symbol
#
 PUSH HL
 LD HL,@a
 POP DE
 CALL ccand

 LD DE,@a
 CALL ccand

2
#
# (int, uint) something ^ symbol
#
 PUSH HL
 LD HL,@a
 POP DE
 CALL ccxor

 LD DE,@a
 CALL ccxor

2
#
# (int, uint) something == symbol
#
 PUSH HL
 LD HL,@a
 POP DE
 CALL cceq

 LD DE,@a
 CALL cceq

2
#
# (int, uint) something != symbol
#
 PUSH HL
 LD HL,@a
 POP DE
 CALL ccneq

 LD DE,@a
 CALL ccneq

2
#
# (int, uint) something || symbol
#
 PUSH HL
 LD HL,@a
 POP DE
 CALL cclgor

 LD DE,@a
 CALL cclgor

2
#
# (int, uint) something && symbol
#
 PUSH HL
 LD HL,@a
 POP DE
 CALL cclgand

 LD DE,@a
 CALL cclgand

2
# ---------------------
# SOMETHING OP (SYMBOL)
# ---------------------
#
# (int, uint) something + (symbol)
#
 PUSH HL
 LD HL,(@a)
 POP DE
 ADD HL,DE

 LD DE,(@a)
 ADD HL,DE

2
#
# (int) something * (symbol)
#
 PUSH HL
 LD HL,(@a)
 POP DE
 CALL ccmul

 LD DE,(@a)
 CALL ccmul

2
#
# (uint) something * (symbol)
#
 PUSH HL
 LD HL,(@a)
 POP DE
 CALL ccumul

 LD DE,(@a)
 CALL ccumul

2
#
# (int, uint) something | (symbol)
#
 PUSH HL
 LD HL,(@a)
 POP DE
 CALL ccor

 LD DE,(@a)
 CALL ccor

2
#
# (int, uint) something & (symbol)
#
 PUSH HL
 LD HL,(@a)
 POP DE
 CALL ccand

 LD DE,(@a)
 CALL ccand

2
#
# (int, uint) something ^ (symbol)
#
 PUSH HL
 LD HL,(@a)
 POP DE
 CALL ccxor

 LD DE,(@a)
 CALL ccxor

2
#
# (int, uint) something == (symbol)
#
 PUSH HL
 LD HL,(@a)
 POP DE
 CALL cceq

 LD DE,(@a)
 CALL cceq

2
#
# (int, uint) something != (symbol)
#
 PUSH HL
 LD HL,(@a)
 POP DE
 CALL ccneq

 LD DE,(@a)
 CALL ccneq

2
#
# (int, uint) something || (symbol)
#
 PUSH HL
 LD HL,(@a)
 POP DE
 CALL cclgor

 LD DE,(@a)
 CALL cclgor

2
#
# (int, uint) something && (symbol)
#
 PUSH HL
 LD HL,(@a)
 POP DE
 CALL cclgand

 LD DE,(@a)
 CALL cclgand

2
# -------------------------------------------------
# CAUTION: This depends on value returned from cceq
# -------------------------------------------------
#
# CALL cceq -- MUST TO BE REVISED. Also cclgnot.
# LD A,H
# OR L
#
# CALL cceq
#
#2
# -------------------------------------------------
# CAUTION: This depends on value returned from ccne
# -------------------------------------------------
#
 CALL ccne
 LD A,H
 OR L

 CALL ccne

2
# -------
#
# -------
#
# ?
#
 LD HL,@1
 PUSH HL
 LD HL,@2
 POP DE

 LD DE,@1
 LD HL,@2

2
#
# ?
#
 LD HL,@a
 PUSH HL
 LD HL,@b
 POP DE

 LD DE,@a
 LD HL,@b

2
#
# ?
#
 LD HL,(@a)
 PUSH HL
 LD HL,(@b)
 POP DE

 LD DE,(@a)
 LD HL,(@b)

2
#
# ?
#
 PUSH HL
 LD HL,@1
 POP DE

 EX DE,HL
 LD HL,@1

1
#
# ?
#
 PUSH HL
 LD HL,@a
 POP DE

 EX DE,HL
 LD HL,@a

1
#
# ?
#
 PUSH HL
 LD HL,(@a)
 POP DE

 EX DE,HL
 LD HL,(@a)

1
# ---------------
# ACCESS TO STACK
# ---------------
#
# ?
#
 LD HL,0
 ADD HL,SP
 CALL ccgw

 POP HL
 PUSH HL

5
#
# ?
#
 LD HL,1
 ADD HL,SP
 CALL ccgw

 POP HL
 POP BC
 PUSH BC
 PUSH HL
 LD L,H
 LD H,C

1
#
# ?
#
 LD HL,2
 ADD HL,SP
 CALL ccgw

 POP BC
 POP HL
 PUSH HL
 PUSH BC

3
#
# ?
#
 LD HL,4
 ADD HL,SP
 CALL ccgw

 POP BC
 POP DE
 POP HL
 PUSH HL
 PUSH DE
 PUSH BC

1
#
# ?
#
 LD HL,@1
 ADD HL,SP
 LD DE,@2
 ADD HL,DE

 LD HL,@=1+2
 ADD HL,SP

4
#
# ?
#
 PUSH @a
 POP @a


2
#
# ?
#
 PUSH HL
 POP BC
 POP HL
 PUSH HL
 PUSH BC

 EX DE,HL
 POP HL
 PUSH HL
 PUSH DE

1
# ----------------
# EXPAND NOT EQUAL
# ----------------
#
 CALL ccne

 OR A
 SBC HL,DE

0
# -----------------
# CALL, RET & JUMPS
# -----------------
#
# ?
#
 CALL @a
 RET

 JP @a

1
#
# ?
#
 RET
@a
 RET

@a
 RET

1
#
# ?
#
 JP @a
 JP @b

 JP @a

3
#
# ?
#
 JP @a
 JP Z,@b

 JP @a

3
#
# ?
#
 JP @a
 JP NZ,@b

 JP @a

3
#
# ?
#
 JP Z,@a
 JP @b
@a

 JP NZ,@b
@a

3
#
# ?
#
 JP Z,@a
@b
 JP @a

@b
 JP @a

3
#
# ?
#
 JP NZ,@a
@b
 JP @a

@b
 JP @a

3
#
# ?
#
 JP @a
@a

@a

3
#
# ?
#
 JP Z,@a
@a

@a

3
#
# ?
#
 JP NZ,@a
@a

@a

3
# ------------
# MISCELANEOUS
# ------------
#
# ?
#
 LD HL,@a
 CALL ccgw

 LD HL,(@a)

3