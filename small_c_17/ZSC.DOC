A SUMMARY OF THE SMALL C LANGUAGE (for Version 1.7 Oct. 1985)


Introduction

	Small C is a subset of the standard C language.  It was written by Ron
Cain and originally published in Dr.Dobbs Journal of Computer Calisthenics and
Orthodontia,  No.45.   The version described has been modified to generate Z80
mnemonics instead of the original 8080 ones.  A number of bug fixes,  most  of
them  sent  in  by readers of DDJ, have also been incorporated.  Several extra
features have also been  added,  many  based  on  other  enhancements  of  the
original.  This version has been developed under CP/M 2.2.  Unlike the earlier
version  in Vol 15, no attempt has been made to keep the code 8080 compatible.
The libraries have been modified in various ways since the earlier release but
since most of them will only run in RAM, there has been no  particular  effort
to optimise their length by using shorter (but often slower) Z80 instructions.

	The  compiler  inputs  a  program  written  in Small C from a file and
produces a version of the program in Z80 assembler  language  mnemonics  which
can  be  assembled and run on a Z80 system.  The original run time library has
been supplemented by some additional routines which use CP/M  I/O  facilities.
The  library  is divided into modules so that routines that are not needed for
particular applications can be omitted.

 
SMALL  C  SYNTAX  SUMMARY

Variable and Function names 

     All  variables must be declared.  If they are declared outside a function
they are global.  Variables and function names should consist of not more than
8 alpha-numeric characters.  Global variables and  function  names  appear  as
labels  in  the assembler language file produced by the compiler, so they must
satisfy any special requirements of the assembler that is to be used.

Permitted Data  types

char - 8 bit signed integer with values between -128 and +127
   eg.  char cin,cout; declares two character variables called cin and cout
int -  16  bit signed  integer  with  values  between  -32768  and  +32767
   eg.  int num,val;  declares two integer variables called num and val
Pointers  to  char  or  int data.
   Pointers  contain  the  addresses  of  data elements.
   eg.  int *size; declares a pointer to an integer 
	  char *pch; declares a pointer to a  character
Single  dimension  arrays  of  character  or  integer  variables.
   eg.  char line[80]; declares a character array of elements line[0] to
	   line[79].


Operators
 
     The operators listed below can be applied to expressions rather than just
to single variables where appropriate.
 
1. Unary  (These operators group right to left)
 
-	Minus.   Forms 2's complement.
*	Pointer. Refers to data whose address is given by an expression.
&	Gives the address of the expression if any.
++   Increment the expression. ++expression will increment the expression
     before using it. Expression++ will use the expression then increment it.
--   Decrement. This works like ++.
 
2. Binary   (These operators group left to right except for assignment)
 
* /  Multiply, Divide
%	Modulo. Gives remainder after division.
+ -  Add, Subtract
>> <<  Right and left shift.   eg. x>>2 will give x shifted right by 2 bits.
	(**NB** These are arithmetic shifts: for right shift the highest order
	 bit is propagated into the vacant bit positions)
|	Bitwise logical Inclusive OR
&	Bitwise logical AND
^	Bitwise logical Exclusive OR
=	Assignment of value on the right to the left. a=b=c=5 is a legal
	 expression with a final value of 5.
 
3. Relational   (These also group left to right)
 
Pointers are unsigned.
Expressions are considered 'true' if their value is non-zero.
 
==   Equal  (Unlike the "=" above, this does not cause assignment when used)
!=   Not equal
<	Less than
>	Greater than
<=   Less than or equal
>=   Greater than or equal

The && and || logical operators of standard C are missing. The bitwise & and |
can be used with care between proper logical  expressions in brackets  because
these are always given a value of 1 or 0 depending on whether they are true or
false. 

Types of Statement
 
N.B. All reserved words such as if,else,while,return etc.MUST be in lower case.
 
    Expression;

    if(expression) statement; Statement executed if expression is non-zero

    if(expression) statement; Statement executed if expression is non-zero
    else statement;	     Statement executed if expression is zero

    while(expression)statement; Statement executed while expression is 
    non-zero.     (It is possible for the statement not to be executed at all)

    do statement while(expression); Do statement until expression is false.
    The test is at the end of the loop. 
  
    for(expr1;expr2;expr3)statement; expr1 initialises a variable. expr2 tests
    a condition involving the variable. expr3 increments or otherwise alters
    the variable. The statement is executed until expr2 becomes false.

    switch(expression)
    { case value1:statement;  Different case statements are executed depending
	case value2:statement; on the value of the switch expression. Most 
	 etc.		       case statements end with a break; to avoid the 
	default:statement;	     other statements below.
    }

    break;    Control transferred from the innermost while loop

    continue; Return control to the top of the while loop

    return; return from function

    return expression; return from function with value given by expression
  
    ; null statement
   
    {  statement;statement;statement;..statement;}  compound statement
	  which may be used anywhere instead of a simple statement.
 

Constant values
 
These can be expressed as:

Decimal numbers within the permitted range

Hexadecimal numbers in upper or lower case preceded by '0x' or '0X'

One or two characters in single inverted commas.  eg.  'A' is equivalent to 65
(decimal).   Within  the  program  '\b','\t','\n','\f' and '\r' have values of
8,9,10,12 and 13 respectively.   In  the  output functions '\n'  outputs  '\r'
followed by '\n'.

A  string  in  double  inverted  commas.  eg.  "Fred Jones" this has a 'value'
consisting of a pointer to the string, terminated by a null byte, somewhere in
memory.  

Pseudo-preprocessor  Statements

  #define  name  string  Replace name by string throughout the program
  #include filename Insert named file at  this  point  in the  program
   eg.   #include CRUN2.LIB 
     Included files may not contain #include statements. 
  #asm ...  #endasm This allows assembly language to be included in a program.
	Anything between #asm and #endasm is passed straight  to  the  O/P file.
  Comments  are  written:  /*  Comment */ 

The Run Time Libraries

     Small  C programs should start with a statement: "#include CRUN2.LIB".The
run time routines in CRUN2.LIB include an initial section which  will  set  up
the  stack  and  then  call  the  function  "main()" which must exist in all C
programs.  The group of routines in CRUN2.LIB are essential  in  all  Small  C
programs,  except  for  the  "getp"  and  "putp"  functions.   The other three
libraries can be #included if required.  CONIO2.LIB  contains  functions  that
will  normally  be  needed for CP/M character and string I/O from the console,
FILE2.LIB (which assumes CONIO2.LIB is also present) can be #included if files
are going to be used.  NUMIO2.LIB contains some routines in  C  for  inputting
and outputting decimal and hexadecimal numbers.

     The  introduction  of the printf and scanf functions have complicated the
library situation because they use a large  number  of  the  routines  in  the
libraries described above.  If you want to use the formatted I/O you will have
to include all the libraries listed above, except NUMIO2.LIB which is embedded
in  FORMAT.LIB  anyway,  even  if you don't want to use any files.  Even quite
small programs will finish up with a length of 8k or more because of this.  It
is often possible to get along only with the simpler functions such as getdec,
putdec, gets and puts.

     To  keep  the  management of file channels simple, only one input and one
output file may be open at a time.  CON: and LST: are  acceptable  O/P  names.
After  compilation  the stack pointer setting and the ORG pseudo-op can be set
to suit a particular application if required.  

     The  library  routines  are  quite  heavily  commented.   To speed up the
processing of #included files, it may be worth preparing uncommented versions.

     If  software  for  a  stand  alone  system is being written, the run time
routines can be reduced to the group of essential routines in  CRUN2.LIB  plus
the "getp" and "putp" functions. These are supplied in CRUNLONE.LIB.

Functions in CRUN2.LIB
	getp(n) will get an 8bit value from port n.
	putp(ch,n) will output an 8 bit value to port n.
	(The rather  more  obvious  function names "in" and "out" don't work
	   with Z80ASM as they clash with Z80 mnemonics.) 

    The  file  starts  with  default settings of: ORG 100H and a setting of SP
below the BDOS.  There are initialising routines which move any  command  line
arguments  to  a  buffer.   The rest of the file consists of essential utility
routines from the original library published by Ron Cain and  a  few  by  Mike
Bernson  for  handling  the switch/case structure.  CRUNLONE.LIB is a cut-down
version of CRUN2.LIB which omits the command line handling and  other  RAM  or
CP/M dependent features.

Functions in CONIO2.LIB
	cpm(DE_value,C_value) makes a CP/M system call. Returns with value of A.
*	getchar()    Get a character from the keyboard. (Echoed to screen)
*	putchar(c)   Put a character to the VDU
*	gets(buff)   Get a null terminated string into a buffer pointed to by
			 buff
*	puts(buff)   Output a null terminated string pointed to by buff to VDU
			   \n,\b and \t give CR/LF,backspace and tab.
	getkbd()   Scan keyboard. Returns 0 if nothing there (CP/M 2.2 only)
	crlf()	 Output carriage return and line feed to VDU
	lston()	 Turn on LST: device for CON: output
	lstoff()   Turn off LST:

Functions in FILE2.LIB
*	putc(char,iochannel)  Output character to opened output file. Returns
			 character value or -1 if error.
*	getc(iochannel)  Get character from opened input file. Returns a value
			 or -1 if error. 
*	fopen(filename,mode) eg.io= fopen("FRED.DAT","r"); use "r" for read
			 and "w" for write files.The file name is passed as a 
			 pointer. LST: and CON: are acceptable output names. 
			 The function returns the value of the iochannel
			 assigned, or zero if the open fails. Only 1 "r" and
			 1 "w" file may be open at a time. The channels in
			 this version are always 1 for "w" and 2 for "r".
*	fclose(iochannel)  Close a file. (fclose(0) causes the closing of the 
			 only write file without a terminating ^Z.)
	eof()	 	This returns a value of 0 until an attempt has been
			made to read a sector beyond the end of a file. ASCII
			files will normally have returned ^Z before eof() 
			becomes 'true'. 
*	exit()	 Exit C program, close write files, and do a warm start.

Functions in NUMIO2.LIB
	getdec()    Get a decimal number from the keyboard with a '?' prompt
	putdec(n)   Outputs a signed decimal number to the VDU
	gethex()    Gets a hex number from the keyboard with '$' prompt
	putbyte(ch) Output a character as a 2 digit hex number
	puthex(n)   Output an integer as a 4 digit hex number
*	atoi(ptr)   Convert an ASCII string no. pointed to by ptr to integer
	hextoi(ptr) Convert ........ hex....................................

Functions in FORMAT.LIB (CRUN2.LIB,CONIO2.LIB and FILE2.LIB needed)
    This library contains the NUMIO2.LIB routines plus the following:
*	 printf(format_pointer,arg1,arg2....) Formatted output. %d, %x, %c 
		and %s supported with optional field widths. Also \ chars
		supported though they will mess up fields if included in
		formatted strings. If a field is too small the stuff is
		printed anyway. Variable no. of arguments. Hex numbers are
		always printed as 4 digits.
*	sprintf(mem_pointer,format_pointer, args..) Like printf but it sends  
		output to memory.
*	fprintf(channel,format_pointer,args..) Like printf but sends O/P to 
		opened write file.
*	scanf(format_pointer,&arg1,&arg2 etc) Only %x and %d are supported in
		free format. Returns the number of args found. Args not
		found are unaltered. Intervening non-numeric or non-
		hexadecimal characters are ignored. 0x & 0X ignored in %x.
		ADDRESSES of arg1 etc must be passed to the function.
*	fscanf(channel,format_pointer,&arg1 etc) Like scanf but gets input
		from an opened read file.
*	sscanf(pointer,format_pointer, &arg1 etc) Like scanf but gets input
		from memory pointed to by first pointer.
*	fputs(pointer,channel) Sends a string to a file
	sputs(source_pointer,target_pointer) Moves a NULL terminated string.
*	fgets(pointer,channel) Not very standard. Gets a string from a file
		until a NULL,EOF or CR is found. If CR it reads the next char
		and assumes it is a LF. Terminates input with NULL.
		Returns last char. CR,EOF or NULL.
	fputdec(value,channel) Sends a decimal number to a file
	fputhex(value,channel) Sends a 4 digit hex number to a file

Functions in MORELIB.LIB (Z80 translation from Mike Bernson's STDLIB.ASM)
*	 toupper(ch) Convert to upper case 
*	 tolower(ch) Convert to lower case 
*	 isupper(ch) Check for upper case     Return 1/0 for true/false
*	 islower(ch) Check for lower case     ...................
*	 isdigit(ch) Check for numeric decimal digit ............
*	 isalpha(ch) Check for alphabetic digit .................
*	 isspace(ch) Check for ' ' or tab     ...................
*	 strlen(ptr) Return length of string pointed to by ptr
*	 strcpy(ptr1,ptr2) Copy string from ptr2 to ptr1
*	 strcat(ptr1,ptr2) Copy string ptr2 to end of ptr1 string
*	 strpos(ptr1,ptr2) Look for string ptr2 in string ptr1. Return position
AMS.LIB is an experimental library that includes the basic run-time routines
and has some simple I/O and graphics functions that run under the Amsdos
operating system. In conjunction with AMLOAD.COM they allow programs for
Amstrad CPC464 computers (and probably other CPCs) to be developed under
CP/M and then coverted from HEX files to Amsdos BIN files.
See the separate DOC file for more details.

[* indicates a function which is similar (but not always identical) to one 
in 'standard' C.] 
 
Using command line arguments

     The function 'main' can start with:
	
		main(argc,argv)
		int argc,argv[]
		{ etc.

	argc  is  an integer equal to the number of command line arguments and
will be equal to 1 if the command line only consisted of a .COM filename, argv
is an array of pointers to the beginings of the arguments that are stored in a
buffer by the initialising process.  Small C doesn't support pointer arrays so
the pointers have to be stored in an integer array.  They should be moved to a
character pointer before use.  argv[0] is junk.  arg[1] contains a pointer  to
the first extra argument etc.


Using  the  Small C Compiler.

    Use  a  normal  editor  to  write your program, .C is the usual file type.
There are two ways of running the compiler: Either (a) the compiler  can  just
be  run and a set of questions answered about options, file names etc.  or (b)
the file names can be entered on the command line with  default  options.   If
you  want  to use non-standard file name types you should use method (a) since
in method (b) the file types are assumed to be .C and .ZSM.  If you don't like
the type for the output file the letters of "ZSM" are at addresses 2CAH,  2E0H
and 2F6H.

	Method  (a): It is usually a good idea to ask for your C program to be
included in the assembler file as comments.  Global  variables  will  normally
need to be defined, unless a very large program is being compiled into several
separate  assembler  files.   Choose a small number for the start of the label
numbering.  It is probably best to start by asking for  a  pause  after  error
messages.  You can turn the pause off by entering '.'  after an error message.
Any  other  character  will  cause  a  continuation of compilation to the next
error.  Once one error has been encountered the compiler often gets a bit lost
and generates further messages which will disappear when the original  problem
has  been  cleared  up.   The  program  will  abort  after  40 errors.  During
compilation the names of the functions are listed as they are compiled.   This
should  help  you to find errors.  The names of the functions are displayed by
printing the lines that the compiler thinks are function headers, if you  make
an  error  you may find that the compiler will get mixed up and start printing
other lines where it thinks a function ought to start.  Give the names of  the
output  and input files when they are asked for (OUTPUT FIRST).  Names must be
given in full and may include a drive name.  If you try to use a file of type
.C as an output file you will get a message to say that a file of type .O will
be  used.   LST:  and  CON:  are  acceptable  output  names if you just want a
compiler output listing of a correct program,  but  you  will  get  a  certain
amount  of  character doubling on stuff such as error messages that is usually
sent to both the screen and the file.  When compilation is complete  you  will
be  asked  for  another input file name which can be added to the one compiled
previously.  Usually you just enter a <RETURN> to exit from the compiler.   It
is  possible  to  enter  <RETURN> as the answer to the first four questions on
entering the compiler, in which case the program will default to including the
C program as comments, definition of globals and labels  starting  at  0,  and
pauses after errors.

Method (b):  You can give file names in the command line:
		i.e.  ZSC FILE [OFILE]    (Default file types .C and .ZSM )
If  the  second  file name is omitted it will be assumed to be the same as the
first but of type .ZSM.  The first should be of type .C.  Don't enter the file
types in the command line.  There will be assumptions that C source is  to  be
included  as comments, globals are to be defined, labels start at 0 and pauses
are to occur after errors.  It is assumed that only a single source program is
to be compiled (though several can be  linked  together  with  a  sequence  of
#include statements).

     If  you  are  trying to produce ROMable code you must confine yourself to
CRUNLONE.C.  In any case you will probably have to edit CRUNLONE.LIB and  some
of  the  final  assembler  language file.  You will find that global variables
have been given storage at the end of the listing.  If the program is intended
for a stand-alone application with its final code in EPROM you  will  have  to
put  in  another ORG pseudo-op before the variable addresses to locate them in
RAM.  The other LIB files, except the extra routines in MORELIB.LIB,  all  use
buffers,flags  etc  which  have to be in RAM or rely on routines that do.  For
normal CP/M programs editing shouldn't be needed.   When  the  file  has  been
compiled, assemble the output file in the usual way and run it.  


Linking  Small  C  output  to  machine  code 

    If a function is called: eg.  jim(arg1,arg2,arg3), the compiler pushes the
values  of  arg1,arg2  and arg3 on the stack in the order that they are listed
and then generates a call to a label "jim".  If an argument is a  string  such
as "Fred Jones", the argument value will be a pointer to the string which will
be  somewhere  in memory terminated by a null byte.  Values should be returned
in HL.  8 bit values should be sign extended to 16 bits and the  simplest  way
to  do  this  is  to  put  the value into A and jump to a routine in CRUN2.LIB
called "ccsxt" which will do this for you.  The stack must be restored to  its
previous state before returning.  The last argument will still be in HL when a
function  is  entered, so if a function has only one argument there is no need
to get it off the stack.There are examples  of  this  in  the  library  files.
Machine  code  functions  can be put between #asm and #endasm directives among
the Small C functions or they can be #included  from  a  separate  file  (also
between #asm and #endasm).  The functions printf,sprintf,ssprintf,scanf,fscanf
and  fscanf  are recognised by name by the compiler and have an extra argument
added at the end of the others which gives the  number  of  arguments  in  the
function call.  This allows variable numbers of arguments to be used for these
functions.   Other  functions with these names or which start with the special
names should be avoided.


Some other details of the compiler

     The  original Small C program published by Ron Cain was itself written in
C.  The version described here was  originally  typed  into  an  Onyx  in  the
Electrical  Engineering Department at Brighton Polytechnic and compiled on the
Onyx's C compiler to produce  a  Small  C  compiler  running  under  UNIX.   A
slightly  modified  version of the Small C source was then fed into the Onyx's
Small C compiler to produce a Z80 assembler file  which  was  assembled.   The
final  Z80/8080  code  was then moved to a microcomputer and hence to a floppy
disc.  This version has been further modified under CP/M.  As far as is  known
the  slight  eccentricities  of Z80ASMUK have been accomodated.  The output is
also  compatible  with  other  normal  Z80 assemblers including ZSM. The ASZ80
assembler  in  Vol  517 of the Netherlands Library is also very nice. It gives
.COM files directly and allows inclusion of assembler versions of libraries at
assemble  time (the libraries need some minor modifications).      Quite a lot
of  additional  code  has  been  included  in  this  version  to  support  the
switch/case, for loop and command line arguments.  This has all  been  heavily
based  on a version of Small C in Vol 9 of the C User's group by Mike Bernson.
I have not been able to compile a Z80 version of his compiler  on  my  C80  or
earlier  Small  C  compilers  successfully  so far.  The do-while routines are
taken from the 8086 Small C adapted by Glen Fisher.  One of my  colleagues  at
Brighton  Poly,  Peter  Mercer,  added  hex constants starting with '$' to the
version of Small C that we have been running under UNIX.  I've put  these  in,
but  modified  them  to  use  '0X'  instead  of  '$'.  In the compiler support
routines, 1k buffers are used for the read and #include input streams and  the
normal  buffer  at  $80 for output.  The #include routine in the compiler also
passes an argument "i" to the fopen routine so as to distinguish the call from
the read fopen call which passes the standard "r". The routines are similar to
the ones in CONIO2.LIB and FILE2.LIB except for the larger i/p buffers and the
possibility of "i" mode.  Included file names may optionally  be  enclosed  in
"<" and ">" symbols or quotes.

     The  compiler  is  about  28K  long  and  when  compiled (with C comments
included) the assembler code takes up about 200K of disk space so that it will
need  a  system  with  at  least  48k  of  memory  to  run in.  I've  used  an
Amstrad CPC 464 for smaller programs quite successfully. 

    The  compiler  source  is  divided  into two sections ZSC-1.C and ZSC-2.C.
They can be combined into a single file if desired, but I find them easier  to
edit  in  their present form.  If it is desired to recompile the compiler just
run  ZSC.COM and enter first ZSC-1.C as the input file and then  ZSC-2.C  when
the  name  of  the  next  input  file  is  asked  for.   The  support  library
ZSC-C.LIB can be pulled in after ZSC-2.C in a similar manner.  


References.

Dr. Dobbs Journal of Computer Calisthenics and Orthodontia, Box E, Menlo Park,
					 CA 94025

  No. 45  (May 1980)   "A Small C Compiler for the 8080's"  by Ron Cain
		  A listing in C of the 8080 compiler + notes on implementation.
		  This issue also contains other articles about C.

  No. 48  (Sept. 1980) "A Runtime Library for the Small  C  Compiler"  
	  by  Ron Cain -   Run time library + useful notes.
	  (See also Nos. 52, 57 and 62 for bug notes by P.L.Woods, K.Bailey,
			  M.Gore & B.Roehl, J.E.Hendrix)

  Nos. 81 and 82 (July, Aug. 1983) "RED - A better Screen Editor" by E.K.Ream
		  A screen editor written in Small C with a number of library
		  routines.
     
  There is  a later version of Small C by J.E.Hendrix in DDJ Nos.74 and 75 
   but this is copyright and so presumably not in the public domain. 
  
"The Small C Handbook" J.E.Hendrix  This is mainly devoted to an update
   of Hendrix's development of Small C.  No support routines given, though 
   they are given in the DDJ version.

C Users Group Vol 9. This contains Mike Bernson's Small C. This is an 
   8080 version and uses a special assembler which is provided. The
   original was got going via BDS C.

SIG/M Vol 149  This includes C86 adapted by Glen Fisher

SIG/M Vol 224  This contains a floating point, Z80 version of Small C.
  There is also a Z80 assembler and linker. There are some formatted
  I/O facilities. The programming constructs are those in the original
  compiler. Modifications by J.R.Van Zandt. 

"A book on C" by R.E.Berry and B.A.E.Meekings. (Macmillan 1984)
   This includes a listing of 'Rat.C' which is very similar to Ron Cain's
   version but has useful cross-referrence  listings  etc.  This  reference is
   also worth examining if you want to adapt the compiler to other CPU's. It's
   also quite a good introductory low priced text on C in general.
 
"The C Programming Language" by B.W.Kernighan and D.M.Ritchie (Prentice-Hall)
		 The standard text on C.

"The  UNIX System" by S.R Bourne. (Addison-Wesley). A superb book on UNIX with
  a chapter on C  and an appendix which defines most of the important standard
  C functions.

The C/80 compiler from Software Toolworks is an 8080 code compiler which seems
to be based on Small C but is considerably enhanced.


				    John  Hill  (Nov.1983/Mar.1984/Oct 1985)
hi